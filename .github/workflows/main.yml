name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev

jobs:
  source:
    name: Source Stage
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

  build:
    name: Build Stage
    runs-on: ubuntu-latest
    needs: source
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Debug Directory Structure
        run: |
          ls -l
          ls -l app/
      # Step 1: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 2: Install dependencies for the Flask app
      - name: Install dependencies
        run: |
          pip install -r app/requirements.txt

      # Step 3: Validate the Flask app
      - name: Check Flask App Structure
        run: |
          if [ ! -f "app/app.py" ]; then echo "Error: app.py not found!" && exit 1; fi
          if [ ! -f "app/static/index.html" ]; then echo "Error: index.html not found!" && exit 1; fi
          echo "Flask app structure validated successfully!"

      # Step 4: Set up Terraform environment
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      # Step 5: Initialize Terraform
      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      # Step 6: Validate Terraform configuration files
      - name: Terraform Validate
        working-directory: terraform
        run: terraform validate

  test:
    name: Test Stage
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Step 1: Run unit or integration tests for the Flask app
      - name: Run tests
        working-directory: app
        run: |
          pytest --maxfail=5 --disable-warnings -q

  deploy:
    name: Deploy Stage
    runs-on: ubuntu-latest
    needs: test
    steps:
      # Step 1: Apply Terraform to deploy infrastructure
      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Step 2: Sync index.html to S3
      - name: Sync Frontend to S3
        run: |
          aws s3 cp app/static/index.html s3://my-flask-frontend-bucket/index.html \
          --region us-east-1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
